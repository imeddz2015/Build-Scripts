--- gettext-runtime/gnulib-lib/xalloc-oversized.h
+++ gettext-runtime/gnulib-lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef __xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,9 +43,11 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- libtextstyle/lib/xalloc-oversized.h
+++ libtextstyle/lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef __xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,9 +43,11 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- gettext-tools/libgettextpo/xalloc-oversized.h
+++ gettext-tools/libgettextpo/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef __xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,9 +43,11 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- gettext-tools/gnulib-lib/xalloc-oversized.h
+++ gettext-tools/gnulib-lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef __xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,9 +43,11 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- gettext-runtime/gnulib-lib/xalloc.h
+++ gettext-runtime/gnulib-lib/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- libtextstyle/lib/xalloc.h
+++ libtextstyle/lib/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- gnulib-local/lib/xalloc.h
+++ gnulib-local/lib/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- gettext-tools/libgettextpo/xalloc.h
+++ gettext-tools/libgettextpo/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- gettext-tools/gnulib-lib/xalloc.h
+++ gettext-tools/gnulib-lib/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- gettext-tools/src/Makefile.in
+++ gettext-tools/src/Makefile.in
@@ -579,7 +579,7 @@
 	$(CFLAGS) $(cldr_plurals_LDFLAGS) $(LDFLAGS) -o $@
 am_hostname_OBJECTS = hostname-hostname.$(OBJEXT)
 hostname_OBJECTS = $(am_hostname_OBJECTS)
-hostname_LDADD = $(LDADD)
+hostname_LDADD = $(LDADD) $(LTLIBICONV)
 hostname_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(hostname_LDFLAGS) $(LDFLAGS) -o $@
@@ -681,14 +681,14 @@
 	recode_sr_latin-recode-sr-latin.$(OBJEXT) \
 	recode_sr_latin-filter-sr-latin.$(OBJEXT)
 recode_sr_latin_OBJECTS = $(am_recode_sr_latin_OBJECTS)
-recode_sr_latin_LDADD = $(LDADD)
+recode_sr_latin_LDADD = $(LDADD) $(LTLIBICONV)
 recode_sr_latin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
 	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
 	$(AM_CFLAGS) $(CFLAGS) $(recode_sr_latin_LDFLAGS) $(LDFLAGS) \
 	-o $@
 am_urlget_OBJECTS = urlget-urlget.$(OBJEXT)
 urlget_OBJECTS = $(am_urlget_OBJECTS)
-urlget_LDADD = $(LDADD)
+urlget_LDADD = $(LDADD) $(LTLIBICONV)
 urlget_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(urlget_LDFLAGS) $(LDFLAGS) -o $@
@@ -2672,7 +2672,7 @@
 urlget_SOURCES = urlget.c
 cldr_plurals_SOURCES = cldr-plural.y cldr-plural-exp.c cldr-plurals.c
 cldr_plurals_CFLAGS = $(AM_CFLAGS) $(INCXML)
-cldr_plurals_LDADD = libgettextsrc.la $(LDADD)
+cldr_plurals_LDADD = libgettextsrc.la $(LDADD) $(LTLIBICONV)
 # Where to find the built libtextstyle library.
 @USE_INSTALLED_LIBTEXTSTYLE_FALSE@LT_LIBTEXTSTYLE = ../../libtextstyle/lib/libtextstyle.la
 @USE_INSTALLED_LIBTEXTSTYLE_TRUE@LT_LIBTEXTSTYLE = @LTLIBTEXTSTYLE@
@@ -2699,21 +2699,21 @@
 # INTL_MACOSX_LIBS is needed because the programs depend on libintl.la
 # but libtool doesn't put -Wl,-framework options into .la files.
 # For msginit, it is also needed because of localename.c.
-msgcmp_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ @MSGMERGE_LIBM@ $(WOE32_LDADD)
-msgfmt_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msgmerge_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ @MSGMERGE_LIBM@ $(WOE32_LDADD) $(OPENMP_CFLAGS)
-msgunfmt_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-xgettext_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ @LTLIBICONV@ $(WOE32_LDADD)
-msgattrib_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msgcat_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msgcomm_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msgconv_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msgen_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msgexec_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msgfilter_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msggrep_LDADD = $(LIBGREP) libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msginit_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
-msguniq_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(WOE32_LDADD)
+msgcmp_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ @MSGMERGE_LIBM@ $(LTLIBICONV) $(WOE32_LDADD)
+msgfmt_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msgmerge_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ @MSGMERGE_LIBM@ $(LTLIBICONV) $(WOE32_LDADD) $(OPENMP_CFLAGS)
+msgunfmt_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+xgettext_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ @LTLIBICONV@ $(LTLIBICONV) $(WOE32_LDADD)
+msgattrib_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msgcat_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msgcomm_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msgconv_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msgen_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msgexec_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msgfilter_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msggrep_LDADD = $(LIBGREP) libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msginit_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
+msguniq_LDADD = libgettextsrc.la @INTL_MACOSX_LIBS@ $(LTLIBICONV) $(WOE32_LDADD)
 
 # Specify when to relink the programs.
 msgcmp_DEPENDENCIES = libgettextsrc.la ../gnulib-lib/libgettextlib.la $(WOE32_LDADD)
