--- gettext-runtime/gnulib-lib/xalloc-oversized.h
+++ gettext-runtime/gnulib-lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,10 +43,12 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
-# define xalloc_oversized(n, s) \
+# undef xalloc_oversized
+# define xalloc_oversized(n, s)				 \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
     : ({ __xalloc_count_type __xalloc_count; \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- libtextstyle/lib/xalloc-oversized.h
+++ libtextstyle/lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,10 +43,12 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
-# define xalloc_oversized(n, s) \
+# undef xalloc_oversized
+# define xalloc_oversized(n, s)				 \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
     : ({ __xalloc_count_type __xalloc_count; \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- gettext-tools/libgettextpo/xalloc-oversized.h
+++ gettext-tools/libgettextpo/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,10 +43,12 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
-# define xalloc_oversized(n, s) \
+# undef xalloc_oversized
+# define xalloc_oversized(n, s)				 \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
     : ({ __xalloc_count_type __xalloc_count; \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- gettext-tools/gnulib-lib/xalloc-oversized.h
+++ gettext-tools/gnulib-lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,10 +43,12 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
-# define xalloc_oversized(n, s) \
+# undef xalloc_oversized
+# define xalloc_oversized(n, s)				 \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
     : ({ __xalloc_count_type __xalloc_count; \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
