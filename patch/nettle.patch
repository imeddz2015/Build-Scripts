--- run-tests
+++ run-tests
@@ -28,6 +28,13 @@
 
 export srcdir
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 # When used in make rules, we sometimes get the filenames VPATH
 # expanded, but usually not.
 find_program () {
--- testsuite/setup-env
+++ testsuite/setup-env
@@ -2,6 +2,13 @@
 
 set -e
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 # Workaround, it seems difficult to convince wine to put ../lib into PATH.
 case "$EMULATOR" in
     wine*)
--- testsuite/Makefile.in
+++ testsuite/Makefile.in
@@ -138,7 +138,6 @@
 
 # The PATH update is for windows dlls, DYLD_LIBRARY_PATH is for OSX.
 check: $(TS_ALL)
-	LD_LIBRARY_PATH=../.lib PATH="../.lib:$$PATH" DYLD_LIBRARY_PATH=../.lib \
 	  srcdir="$(srcdir)" \
 	  EMULATOR="$(EMULATOR)" NM="$(NM)" EXEEXT="$(EXEEXT)" \
           $(top_srcdir)/run-tests $(TS_ALL)
--- testsuite/nettle-pbkdf2-test
+++ testsuite/nettle-pbkdf2-test
@@ -4,6 +4,13 @@
   srcdir=`pwd`
 fi
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 test_pbkdf2 () {
     password="$1"
     salt="$2"
--- testsuite/sexp-conv-test
+++ testsuite/sexp-conv-test
@@ -4,6 +4,13 @@
   srcdir=`pwd`
 fi
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 print_raw () {
     printf "%s" "$1" > "$2"
 }
--- testsuite/pkcs1-conv-test
+++ testsuite/pkcs1-conv-test
@@ -4,6 +4,13 @@
   srcdir=`pwd`
 fi
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 [ -x ../tools/pkcs1-conv$EXEEXT ] || exit 77
 
 # Private RSA key, generated by openssl
--- testsuite/dlopen-test.c
+++ testsuite/dlopen-test.c
@@ -9,7 +9,11 @@
 main (int argc UNUSED, char **argv UNUSED)
 {
 #if HAVE_LIBDL
+#ifdef __APPLE__
+  void *handle = dlopen ("../libnettle.dylib", RTLD_NOW);
+#else
   void *handle = dlopen ("../libnettle.so", RTLD_NOW);
+#endif
   int (*get_version)(void);
   if (!handle)
     {
--- examples/setup-env
+++ examples/setup-env
@@ -2,6 +2,13 @@
 
 set -e
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 # Workaround, it seems difficult to convince wine to put ../lib into PATH.
 case "$EMULATOR" in
     wine*)
--- examples/Makefile.in
+++ examples/Makefile.in
@@ -115,7 +115,6 @@
 
 # The PATH update is for windows dlls, DYLD_LIBRARY_PATH is for OSX.
 check: $(TS_ALL)
-	LD_LIBRARY_PATH=../.lib PATH="../.lib:$$PATH" DYLD_LIBRARY_PATH=../.lib \
 	  srcdir="$(srcdir)" EMULATOR="$(EMULATOR)" EXEEXT="$(EXEEXT)" \
           "$(top_srcdir)"/run-tests $(TS_ALL)
 
--- examples/rsa-encrypt-test
+++ examples/rsa-encrypt-test
@@ -4,6 +4,13 @@
   srcdir=`pwd`
 fi
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 data="$srcdir/nettle-benchmark.c"
 
 if [ -x rsa-encrypt$EXEEXT ] ; then
--- examples/rsa-verify-test
+++ examples/rsa-verify-test
@@ -4,6 +4,13 @@
   srcdir=`pwd`
 fi
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 data="$srcdir/nettle-benchmark.c"
 
 if [ -x rsa-verify$EXEEXT ] ; then
--- examples/rsa-sign-test
+++ examples/rsa-sign-test
@@ -4,6 +4,13 @@
   srcdir=`pwd`
 fi
 
+nettle_lib_dir=`dirname $PWD`/.lib
+LD_LIBRARY_PATH=$nettle_lib_dir
+DYLD_LIBRARY_PATH=$nettle_lib_dir
+
+export LD_LIBRARY_PATH
+export DYLD_LIBRARY_PATH
+
 data="$srcdir/nettle-benchmark.c"
 
 if [ -x rsa-sign$EXEEXT ] ; then
